<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="user_count" elementType="Argument">
            <stringProp name="Argument.name">user_count</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_USER_COUNT, 20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iteration_count" elementType="Argument">
            <stringProp name="Argument.name">iteration_count</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ITERATION_COUNT, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connection_timeout" elementType="Argument">
            <stringProp name="Argument.name">connection_timeout</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_CONNECTION_TIMEOUT, 2000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="result_size_limit" elementType="Argument">
            <stringProp name="Argument.name">result_size_limit</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_RESULT_SIZE_LIMIT, 51000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="result_time_limit" elementType="Argument">
            <stringProp name="Argument.name">result_time_limit</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_RESULT_TIME_LIMIT, 20000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Parameters productive" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ADMIN_USERNAME)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ADMIN_PASSWORD)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_HOSTNAME, localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_PORT, 10636)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure_ldap_enabled" elementType="Argument">
            <stringProp name="Argument.name">secure_ldap_enabled</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_SECURE_LDAP_ENABLED, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Parameters local" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ADMIN_USERNAME, admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ADMIN_PASSWORD, password)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_HOSTNAME, localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_PORT, 10389)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure_ldap_enabled" elementType="Argument">
            <stringProp name="Argument.name">secure_ldap_enabled</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_SECURE_LDAP_ENABLED, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Parameters local, one user, one iteration" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ADMIN_USERNAME, admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ADMIN_PASSWORD, password)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostname" elementType="Argument">
            <stringProp name="Argument.name">hostname</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_HOSTNAME, localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_PORT, 10389)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure_ldap_enabled" elementType="Argument">
            <stringProp name="Argument.name">secure_ldap_enabled</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_SECURE_LDAP_ENABLED, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_count" elementType="Argument">
            <stringProp name="Argument.name">user_count</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_USER_COUNT, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iteration_count" elementType="Argument">
            <stringProp name="Argument.name">iteration_count</stringProp>
            <stringProp name="Argument.value">${__P(LOADTEST_ITERATION_COUNT, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${user_count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${iteration_count}</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Binding" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller: secure_ldap_enabled" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&apos;secure_ldap_enabled&apos;).equals(&apos;true&apos;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Bind" enabled="true">
                <stringProp name="servername">${hostname}</stringProp>
                <stringProp name="port">${port}</stringProp>
                <stringProp name="rootdn">dc=crowd</stringProp>
                <stringProp name="scope">2</stringProp>
                <stringProp name="countlimit"></stringProp>
                <stringProp name="timelimit"></stringProp>
                <stringProp name="attributes"></stringProp>
                <stringProp name="return_object">false</stringProp>
                <stringProp name="deref_aliases">false</stringProp>
                <stringProp name="connection_timeout">${connection_timeout}</stringProp>
                <stringProp name="parseflag">false</stringProp>
                <stringProp name="secure">true</stringProp>
                <stringProp name="trustall">false</stringProp>
                <stringProp name="user_dn">uid=${username},ou=users,dc=crowd</stringProp>
                <stringProp name="user_pw">${password}</stringProp>
                <stringProp name="comparedn"></stringProp>
                <stringProp name="comparefilt"></stringProp>
                <stringProp name="modddn"></stringProp>
                <stringProp name="newdn"></stringProp>
                <stringProp name="test">bind</stringProp>
              </LDAPExtSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller: not secure_ldap_enabled" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&apos;secure_ldap_enabled&apos;).equals(&apos;false&apos;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Bind" enabled="true">
                <stringProp name="servername">${hostname}</stringProp>
                <stringProp name="port">${port}</stringProp>
                <stringProp name="rootdn">dc=crowd</stringProp>
                <stringProp name="scope">2</stringProp>
                <stringProp name="countlimit"></stringProp>
                <stringProp name="timelimit"></stringProp>
                <stringProp name="attributes"></stringProp>
                <stringProp name="return_object">false</stringProp>
                <stringProp name="deref_aliases">false</stringProp>
                <stringProp name="connection_timeout">${connection_timeout}</stringProp>
                <stringProp name="parseflag">false</stringProp>
                <stringProp name="secure">false</stringProp>
                <stringProp name="trustall">false</stringProp>
                <stringProp name="user_dn">uid=${username},ou=users,dc=crowd</stringProp>
                <stringProp name="user_pw">${password}</stringProp>
                <stringProp name="comparedn"></stringProp>
                <stringProp name="comparefilt"></stringProp>
                <stringProp name="modddn"></stringProp>
                <stringProp name="newdn"></stringProp>
                <stringProp name="test">bind</stringProp>
              </LDAPExtSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search all users, no memberOf" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes">objectClass;ou;cn;sn;gn;displayName;mail</stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=users</stringProp>
            <stringProp name="searchfilter">(objectClass=inetOrgPerson)</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search all users" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=users</stringProp>
            <stringProp name="searchfilter">(objectClass=inetOrgPerson)</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search specific user" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=users</stringProp>
            <stringProp name="searchfilter">(&amp;(objectClass=inetOrgPerson)(cn=lcm_bot_crowd))</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search users by specific group" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=users</stringProp>
            <stringProp name="searchfilter">(&amp;(objectClass=inetOrgPerson)(memberOf=cn=LCM_ALLUSERS_STD,ou=groups,dc=crowd))</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search all groups, no memberOf" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes">objectClass;ou;cn;description;member</stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=groups</stringProp>
            <stringProp name="searchfilter">(objectClass=groupOfUniqueNames)</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search all groups" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=groups</stringProp>
            <stringProp name="searchfilter">(objectClass=groupOfUniqueNames)</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search specific group" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=groups</stringProp>
            <stringProp name="searchfilter">(&amp;(objectClass=groupOfUniqueNames)(cn=LCM_ALLUSERS_STD))</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Search groups by specific user" enabled="true">
            <stringProp name="servername"></stringProp>
            <stringProp name="port"></stringProp>
            <stringProp name="rootdn"></stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit">${result_size_limit}</stringProp>
            <stringProp name="timelimit">${result_time_limit}</stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">true</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn"></stringProp>
            <stringProp name="user_pw"></stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">search</stringProp>
            <stringProp name="search">ou=groups</stringProp>
            <stringProp name="searchfilter">(&amp;(objectClass=groupOfUniqueNames)(member=cn=lcm_bot_crowd,ou=users,dc=crowd))</stringProp>
          </LDAPExtSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Unbinding" enabled="true"/>
          <hashTree>
            <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="Unbind" enabled="true">
              <stringProp name="servername"></stringProp>
              <stringProp name="port"></stringProp>
              <stringProp name="rootdn"></stringProp>
              <stringProp name="scope">2</stringProp>
              <stringProp name="countlimit"></stringProp>
              <stringProp name="timelimit"></stringProp>
              <stringProp name="attributes"></stringProp>
              <stringProp name="return_object">false</stringProp>
              <stringProp name="deref_aliases">false</stringProp>
              <stringProp name="connection_timeout"></stringProp>
              <stringProp name="parseflag">false</stringProp>
              <stringProp name="secure">false</stringProp>
              <stringProp name="trustall">false</stringProp>
              <stringProp name="user_dn"></stringProp>
              <stringProp name="user_pw"></stringProp>
              <stringProp name="comparedn"></stringProp>
              <stringProp name="comparefilt"></stringProp>
              <stringProp name="modddn"></stringProp>
              <stringProp name="newdn"></stringProp>
              <stringProp name="test">unbind</stringProp>
            </LDAPExtSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Active Threads Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
